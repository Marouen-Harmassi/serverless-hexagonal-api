service: serverless-hexagonal-api

plugins:
  - serverless-offline

custom:
  serverless-offline:
    host: 0.0.0.0
  esbuild:
    bundle: true
    minify: true
    sourcemap: false
    exclude: ['aws-sdk']
    target: 'node22'
    platform: 'node'

provider:
  name: aws
  runtime: nodejs22.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-1'}
  environment:
    SERVERLESS_ACCESS_KEY: { env: SERVERLESS_ACCESS_KEY }
    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}'

functions:
  createTask:
    handler: src/infrastructure/handlers/createTask.handler
    events:
      - http:
          path: tasks
          method: post

  getTask:
    handler: src/infrastructure/handlers/getTask.handler
    events:
      - http:
          path: tasks/{id}
          method: get

resources: # TODO: use AWS CDK instead to create resources
  Resources:
    TasksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
